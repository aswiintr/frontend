To fetch data from an endpoint instead of using dummy data in a React component, you can use the `fetch` API or a library like `axios` to make an HTTP request to the desired endpoint. Here's an example of how you can modify the previous example to fetch data from an endpoint:

Assuming you have an endpoint that returns a list of products in JSON format, you can fetch and filter data like this:

```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function ProductFilter() {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [filterCategory, setFilterCategory] = useState('');

  useEffect(() => {
    // Fetch data from your API endpoint when the component mounts
    axios.get('https://api.example.com/products')
      .then(response => {
        setData(response.data);
        setFilteredData(response.data);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, []);

  // Function to apply filters
  const applyFilters = () => {
    // Filter data based on the selected category
    const filteredResult = data.filter(product =>
      filterCategory === '' ? true : product.category === filterCategory
    );
    setFilteredData(filteredResult);
  };

  return (
    <div>
      <h1>Product Filter</h1>
      <label>
        Filter by Category:
        <select
          value={filterCategory}
          onChange={(e) => setFilterCategory(e.target.value)}
        >
          <option value="">All</option>
          <option value="Electronics">Electronics</option>
          <option value="Clothing">Clothing</option>
          <option value="Home">Home</option>
        </select>
      </label>
      <button onClick={applyFilters}>Apply Filters</button>
      <ul>
        {filteredData.map((product) => (
          <li key={product.id}>{product.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default ProductFilter;
```

In this modified example:

1. We use the `useEffect` hook to fetch data from the specified API endpoint when the component mounts.
2. The fetched data is stored in the `data` and `filteredData` state variables.
3. The `applyFilters` function now filters the `data` state instead of a dummy data array.
4. When the "Apply Filters" button is clicked, it filters the fetched data based on the selected category.
5. The filtered data is then displayed in the component.

Make sure to replace `'https://api.example.com/products'` with the actual URL of your API endpoint. This example demonstrates how to integrate data fetching and filtering into a React component.
